type { InfoData } from play-dl
{ type AudioResource, getVoiceConnection } from @discordjs/voice
{ createMachine, assign, createActor } from xstate
{ Collection } from discord.js
{ LimitedQueue } from ../helpers/queue.civet

type GuildId = string

context := {
  resources: new Collection<AudioResource, GuildId>()
  queues: new Collection<GuildId, LimitedQueue<{ channelId: string; info: InfoData }>>()
  timeouts: new Collection<GuildId, NodeJS.Timeout>()
  state: new Collection<GuildId, 'joined' | 'idle' | 'playing'>()
} as const

voiceMachine := createMachine {
  context
  on: {
    restart: {
      actions: assign {
        context.{resources,timeouts,state}
        queues: ({ context }) =>
          for [guildId] of context.queues
            // for { channelId } of queue.items
            //   channel := client.channels.cache.get channelId
            //   if channel?.isTextBased()
            //     channel.send 'The bot is restarting, please wait a moment'
            if connection := getVoiceConnection guildId
              connection.destroy()
          return context.queues
      }
    }
    'queue.add': {
      description: 'Add a resource to the queue'
      actions: assign {
        queues: ({ context, event }) => {
          queue := context.queues.get event.guildId
          if queue then queue.add { event.info, event.channelId }
          return context.queues
        }
      }
    }
    'queue.clear': {
      description: 'Clear the queue'
      actions: assign {
        queues: ({ context, event }) => {
          queue := context.queues.get event.guildId
          if queue then queue.clear()
          return context.queues
        }
      }
    }
    'voice.join': {
      description: 'Join a voice channel'
      actions: assign {
        queues: ({ context, event }) => context.queues.set event.guildId, new LimitedQueue 10
        state: ({ context, event }) => context.state.set event.guildId, 'joined'
      }
    }
    'voice.play': {
      description: 'Play an audio resource'
      actions: assign {
        resources: ({ context, event }) => context.resources.set event.resource, event.guildId
        state: ({ context, event }) => context.state.set event.guildId, 'playing'
      }
    }
    'voice.idling': {
      description: 'Set the voice connection to idle'
      actions: assign {
        state: ({ context, event }) => context.state.set event.guildId, 'idle'
      }
    }
    'voice.destroy': {
      description: 'Destroy the voice connection'
      actions: assign {
        resources: ({ context, event }) =>
          resource := event.resource

          if context.resources.has resource
            context.resources.delete resource
          else
            guildId := event.guildId
            for [resource, id] of context.resources
              if id is guildId
                context.resources.delete resource

          return context.resources
        queues: ({ context, event }) =>
          guildId := event.guildId
          if context.queues.has guildId
            context.queues.delete guildId
          return context.queues
        timeouts: ({ context, event }) =>
          guildId := event.guildId
          if context.timeouts.has guildId
            clearTimeout context.timeouts.get guildId
            context.timeouts.delete guildId
          return context.timeouts
      }
    }
  }
}

export voiceMachineActor := createActor(voiceMachine).start()
