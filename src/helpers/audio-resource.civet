{ type GuildMember, type Guild, EmbedBuilder } from discord.js
playdl, { type InfoData } from play-dl
{ createAudioResource, getVoiceConnection, joinVoiceChannel } from @discordjs/voice
{ audioPlayer } from ../audio-player.civet
{ voiceMachineActor } from ../machines/voice.civet
{ Failure, Success } from ./response.civet

export function playAudioResource(guildId: string, info: InfoData, seek?: number | null)
  try
    source := await playdl.stream_from_info info, {
      ...(seek && { seek })
      // TODO: Try to increase this
      quality: 0
      +discordPlayerCompatibility
    }
    resource := createAudioResource source.stream, {
      inputType: source.type
    }
    ||> .volume?.setVolume 0.1
    audioPlayer.play resource
    voiceMachineActor.send { type: 'voice.play', guildId, resource }
  catch (error)
    console.error error
    return Failure 'Failed to play the song'
  videoReplyEmbed := new EmbedBuilder()
    .setColor 0x080808
    .setURL info.video_details.url
  videoDetails := info.video_details
  if videoDetails.title
    videoReplyEmbed.setTitle videoDetails.title!
  if videoDetails.description
    videoReplyEmbed.setDescription videoDetails.description!
  if videoDetails.thumbnails.length > 0
    videoReplyEmbed.setThumbnail videoDetails.thumbnails.0.url
  return Success videoReplyEmbed

export function queueSong(guildId: string, channelId: string, info: InfoData)
  voiceMachineActor.send { type: 'queue.add', guildId, channelId, info }

export function joinGuildMemberVoiceChannel(member: GuildMember | null, guild: Guild | null)
  unless member or guild
    return Failure 'Member or guild is missing'
  guildId := guild!.id
  currentConnection := getVoiceConnection guildId
  if currentConnection
    if currentConnection.joinConfig.channelId !== member!.voice.channelId
      currentConnection.destroy()
    else
      { state, queues } := voiceMachineActor.getSnapshot().context
      isPlaying := (state.get guildId) is 'playing'
      if isPlaying
        queue := queues.get guildId
        if queue?.isFull
          return Failure 'Queue is full'
        return Failure 'Currently playing a song'
      return Success currentConnection
  if voiceChannel := member!.voice.channel
    guildId := voiceChannel.guild.id
    voiceMachineActor.send { type: 'voice.join', guildId }
    return Success joinVoiceChannel {
      guildId
      channelId: voiceChannel.id
      adapterCreator: voiceChannel.guild.voiceAdapterCreator
    }
  return Failure 'Member is not in a voice channel'
