{ setTimeout } from node:timers/promises
{
  type GuildMember
  SlashCommandBuilder
} from discord.js
{ VoiceConnectionStatus } from @discordjs/voice
playdl, { type YouTubeVideo } from play-dl
type { CommandHandler } from ../types.civet
{ audioPlayer } from ../audio-player.civet
{ playAudioResource, joinGuildMemberVoiceChannel, queueSong } from ../helpers/audio-resource.civet
{ voiceMachineActor } from ../machines/voice.civet

export command := new SlashCommandBuilder()
  .setName 'play'
  .setDescription 'Plays a YouTube song'
  .addStringOption
    &.setName 'search'
    |> .setDescription 'The search or URL of the song to play'
    |> .setRequired true
  .addIntegerOption
    &.setName 'time'
    |> .setDescription 'The `t` time to start the song at'
    |> .setRequired false

function timeoutSearch()
  await setTimeout 5_000
  throw new Error '⏰ The search took too long, try again'

function getVideoInfo(search: string, time: number | null)
  url .= search
  isUrl := /^(https:\/\/)?youtu\.?be/.test url
  unless isUrl
    try
      videosFound := await Promise.race [
        playdl.search search, { limit: 1 }
        timeoutSearch()
      ]
      url = (videosFound as YouTubeVideo[]).0.url
    catch (error)
      return { error: (error as Error).message }
  urlInstance := new URL url
  seek := Number(urlInstance.searchParams.get 't') or time
  info := await playdl.video_info url
  { info, seek }

export default play: CommandHandler := (interaction) ->
  search .= interaction.options.getString 'search'
  time := interaction.options.getInteger 'time'
  unless search
    return interaction.reply { content: 'You need to provide a search or URL to play', +ephemeral }
  await interaction.deferReply()
  try
    searchingMessage := await interaction.followUp '🔍 Searching for the song...'
    { info, seek, error } := await getVideoInfo search, time
    if error then return interaction.followUp error
    [guild, member] := [interaction.guild, interaction.member]
    guildId := guild!.id
    { data: connection, error: joinError } := joinGuildMemberVoiceChannel member as GuildMember, guild
    if errorMessage .= joinError
      if joinError is 'Currently playing a song'
        queueSong guildId, interaction.channelId, info!
        errorMessage += ' -- The song has been added to the queue'
      return searchingMessage.edit errorMessage
    if subscription := connection!.subscribe audioPlayer
      connection!.on VoiceConnectionStatus.Ready, ->
        { data: embed } := await playAudioResource guildId, info!, seek
        unless embed
          return searchingMessage.edit '❌ An error occurred while playing the song'
        searchingMessage.edit {
          content: '🎧 Now playing'
          embeds: [embed]
        }
      connection!.on VoiceConnectionStatus.Destroyed, ->
        state := voiceMachineActor.getSnapshot()
          |> .context.state
        unless state.has guildId
          searchingMessage.edit '❌ Something went wrong here!'
      connection!.on VoiceConnectionStatus.Disconnected, ->
        voiceMachineActor.send { type: 'voice.destroy', guildId }
  catch (error)
    interaction.followUp content: (error as Error).message
